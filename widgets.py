# widgets.py - C√°c widget PyQt6 t√πy ch·ªânh cho ·ª©ng d·ª•ng

from PyQt6.QtWidgets import QStyledItemDelegate
from PyQt6.QtGui import QPainter, QBrush, QColor, QPen, QMouseEvent
from PyQt6.QtCore import Qt, pyqtSignal, QRect, QEvent
from constants import TableColumn

class StatusPillDelegate(QStyledItemDelegate):
    """V·∫Ω m·ªôt vi√™n thu·ªëc m√†u cho c√°c tr·∫°ng th√°i trong b·∫£ng."""
    # T·ªëi ∆∞u h√≥a: T·∫°o s·∫µn c√°c ƒë·ªëi t∆∞·ª£ng QColor ƒë·ªÉ tr√°nh t·∫°o l·∫°i li√™n t·ª•c
    COLORS = {
        "offline": QColor("#631119"),
        "running": QColor("#28a745"),
        "starting": QColor("#3498db"),
        "stopping": QColor("#f39c12"),
        "restarting": QColor("#8e44ad"),
    }
    
    def paint(self, painter: QPainter, option, index):
        status_data = index.data(Qt.ItemDataRole.UserRole)
        painter.save()
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)

        rect = option.rect.adjusted(8, 6, -8, -6)

        # M·∫∑c ƒë·ªãnh
        text = "Offline"
        bg_color = self.COLORS["offline"]

        if isinstance(status_data, bool):
            if status_data: # is_running is True
                text = "Running"
                bg_color = self.COLORS["running"]
        elif isinstance(status_data, str):
            text = f"{status_data.capitalize()}..."
            bg_color = self.COLORS.get(status_data, self.COLORS["offline"])
        
        painter.setBrush(QBrush(bg_color))
        painter.setPen(Qt.PenStyle.NoPen)
        painter.drawRoundedRect(rect, rect.height() / 2, rect.height() / 2)

        painter.setPen(QPen(Qt.GlobalColor.white))
        painter.drawText(rect, Qt.AlignmentFlag.AlignCenter, text)
        painter.restore()


class CheckboxDelegate(QStyledItemDelegate):
    """Delegate for rendering and editing checkboxes in table view."""

    def __init__(self, parent=None):
        super().__init__(parent)

    def paint(self, painter, option, index):
        """Paint the checkbox using Qt's built-in checkbox style."""
        # Let Qt handle the checkbox painting
        super().paint(painter, option, index)

    def editorEvent(self, event, model, option, index):
        """Handle mouse events for checkbox editing."""
        print(f"üñ±Ô∏è CheckboxDelegate.editorEvent: column={index.column()}, event_type={event.type()}")
        
        # Only handle checkbox column
        if index.column() != 0:  # TableColumn.CHECKBOX = 0
            return super().editorEvent(event, model, option, index)
            
        # Only handle MouseButtonPress (event type 2), ignore Release (3), DblClick (4), etc.
        if event.type() == QEvent.Type.MouseButtonPress:
            print(f"üñ±Ô∏è Mouse button press detected")
            # Check if it's a QMouseEvent and left button
            if hasattr(event, 'button') and event.button() == Qt.MouseButton.LeftButton:
                print(f"üñ±Ô∏è Left button click on checkbox at row {index.row()}")
                # Toggle checkbox state on left mouse press
                current_state = model.data(index, Qt.ItemDataRole.CheckStateRole)
                new_state = Qt.CheckState.Unchecked if current_state == Qt.CheckState.Checked else Qt.CheckState.Checked

                print(f"üñ±Ô∏è Current state: {current_state}, New state: {new_state}")
                
                # Set the new state
                success = model.setData(index, new_state, Qt.ItemDataRole.CheckStateRole)
                if success:
                    print(f"‚úÖ Checkbox toggled for row {index.row()}: {new_state}")
                    # Force immediate update
                    model.dataChanged.emit(index, index, [Qt.ItemDataRole.CheckStateRole])
                else:
                    print(f"‚ùå Failed to toggle checkbox for row {index.row()}")

                return True
        else:
            # For all other events (Release, DblClick, etc.), just return True to consume them
            print(f"üñ±Ô∏è Ignoring event type {event.type()}")
            return True

        # Let Qt handle other events if not handled above
        return super().editorEvent(event, model, option, index)


# === Model/View for instances table ===
from PyQt6.QtCore import QAbstractTableModel, QSortFilterProxyModel, QModelIndex, Qt, QVariant, QRect, QEvent
from typing import List, Dict, Any, Optional
import collections

try:
    # Import here to avoid circulars when this file is used standalone
    from constants import TableColumn
except Exception:
    TableColumn = type("TableColumn", (), {"CHECKBOX":0, "STT":1, "NAME":2, "STATUS":3, "ADB":4, "DISK_USAGE":5, "SPACER":6})

class InstancesModel(QAbstractTableModel):
    stats_updated = pyqtSignal(int, int) # total, running

    def __init__(self, parent=None):
        super().__init__(parent)
        self._rows: List[Dict[str, Any]] = []  # each: {'index': int, 'info': dict, 'checked': bool}
        self._ui_states: Dict[int, Any] = {}   # transient status per index
        self._index_map: Dict[int, int] = {} # Map vm_index to row_index for fast lookup

    def rowCount(self, parent=QModelIndex()):
        return 0 if parent.isValid() else len(self._rows)

    def columnCount(self, parent=QModelIndex()):
        return 7

    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role != Qt.ItemDataRole.DisplayRole:
            return None
        if orientation == Qt.Orientation.Horizontal:
            headers = ["", "Index", "T√™n m√°y", "Tr·∫°ng th√°i", "ADB", "Dung l∆∞·ª£ng", ""]
            return headers[section] if 0 <= section < len(headers) else ""
        return super().headerData(section, orientation, role)

    def flags(self, index: QModelIndex):
        if not index.isValid():
            return Qt.ItemFlag.NoItemFlags
        flags = Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsSelectable
        if index.column() == 0:  # CHECKBOX column
            flags |= Qt.ItemFlag.ItemIsUserCheckable
        return flags

    def data(self, index: QModelIndex, role=Qt.ItemDataRole.DisplayRole):
        if not index.isValid():
            return None
        r = index.row()
        c = index.column()
        
        # T·ªëi ∆∞u h√≥a: Tr√°nh truy c·∫≠p self._rows nhi·ªÅu l·∫ßn
        try:
            row = self._rows[r]
        except IndexError:
            return None
            
        info = row.get("info", {})
        idx = row.get("index")

        if c == 0:  # CHECKBOX column
            if role == Qt.ItemDataRole.CheckStateRole:
                return Qt.CheckState.Checked if row.get("checked", False) else Qt.CheckState.Unchecked
            return None

        if c == 1:  # STT column
            if role == Qt.ItemDataRole.DisplayRole:
                return str(idx) if idx is not None else "N/A"
            if role == Qt.ItemDataRole.UserRole:
                return idx if idx is not None else -1
            if role == Qt.ItemDataRole.TextAlignmentRole:
                return int(Qt.AlignmentFlag.AlignCenter)
            return None

        if c == 2:  # NAME column
            if role == Qt.ItemDataRole.DisplayRole:
                return info.get("name", "N/A")
            if role == Qt.ItemDataRole.UserRole:
                return idx
            return None

        if c == 3:  # STATUS column
            if role == Qt.ItemDataRole.UserRole:
                if idx in self._ui_states:
                    return self._ui_states[idx]
                return info.get("is_process_started", False)
            if role == Qt.ItemDataRole.DisplayRole:
                # Delegate s·∫Ω x·ª≠ l√Ω vi·ªác hi·ªÉn th·ªã text
                return ""
            return None

        if c == 4:  # ADB column
            if role == Qt.ItemDataRole.DisplayRole:
                val = info.get("adb_port", "‚Äî")
                return str(val if val not in (None, "") else "‚Äî")
            return None

        if c == 5:  # DISK_USAGE column
            if role == Qt.ItemDataRole.DisplayRole:
                disk_bytes = info.get("disk_size_bytes", 0) or 0
                if disk_bytes > 0:
                    gb = disk_bytes / (1024**3)
                    return f"{gb:.2f} GB" if gb >= 1 else f"{disk_bytes / (1024**2):.2f} MB"
                raw_disk = info.get("disk_usage", "")
                return str(raw_disk) if raw_disk else "0MB"
            if role == Qt.ItemDataRole.TextAlignmentRole:
                return int(Qt.AlignmentFlag.AlignCenter)
            return None

        return None

    def setData(self, index: QModelIndex, value, role=Qt.ItemDataRole.EditRole):
        if not index.isValid():
            return False
        r = index.row()
        c = index.column()
        if c == 0 and role == Qt.ItemDataRole.CheckStateRole:  # Checkbox column = 0
            self._rows[r]["checked"] = (value == Qt.CheckState.Checked)
            print(f"üîÑ Model setData: Row {r} checked = {self._rows[r]['checked']}")
            self.dataChanged.emit(index, index, [Qt.ItemDataRole.CheckStateRole])
            return True
        return False

    def set_rows(self, items):
        """C·∫≠p nh·∫≠t model m·ªôt c√°ch th√¥ng minh, tr√°nh reset to√†n b·ªô."""
        # Handle both tuple (index, info) and dict formats
        if items and isinstance(items[0], tuple):
            # Convert tuple format (index, info) to dict format
            new_data_map = {idx: {'index': idx, 'info': info} for idx, info in items}
        else:
            # Handle dict format for backward compatibility
            new_data_map = {item['index']: item for item in items}
        
        new_indices = set(new_data_map.keys())
        old_indices = set(self._index_map.keys())

        # 1. X√°c ƒë·ªãnh c√°c h√†ng c·∫ßn x√≥a
        to_remove_indices = old_indices - new_indices
        if to_remove_indices:
            # S·∫Øp x·∫øp ng∆∞·ª£c ƒë·ªÉ kh√¥ng l√†m thay ƒë·ªïi index c·ªßa c√°c h√†ng ch∆∞a x√≥a
            rows_to_remove = sorted([self._index_map[idx] for idx in to_remove_indices], reverse=True)
            for row_idx in rows_to_remove:
                self.beginRemoveRows(QModelIndex(), row_idx, row_idx)
                del self._rows[row_idx]
                self.endRemoveRows()
            # C·∫≠p nh·∫≠t l·∫°i map sau khi x√≥a
            self._rebuild_index_map()

        # 2. X√°c ƒë·ªãnh c√°c h√†ng c·∫ßn c·∫≠p nh·∫≠t v√† th√™m m·ªõi
        to_update_indices = old_indices.intersection(new_indices)
        to_add_indices = new_indices - old_indices

        # C·∫≠p nh·∫≠t c√°c h√†ng hi·ªán c√≥
        for vm_index in to_update_indices:
            row_idx = self._index_map[vm_index]
            new_info = new_data_map[vm_index]['info']
            # So s√°nh s√¢u h∆°n ƒë·ªÉ tr√°nh c·∫≠p nh·∫≠t kh√¥ng c·∫ßn thi·∫øt
            if not self._are_dicts_equal(self._rows[row_idx]['info'], new_info):
                self._rows[row_idx]['info'] = new_info
                # Ph√°t t√≠n hi·ªáu thay ƒë·ªïi cho c·∫£ h√†ng
                first_col = self.index(row_idx, 0)
                last_col = self.index(row_idx, self.columnCount() - 1)
                self.dataChanged.emit(first_col, last_col)

        # Th√™m c√°c h√†ng m·ªõi
        if to_add_indices:
            new_rows_data = [new_data_map[idx] for idx in sorted(list(to_add_indices))]
            first_row_to_add = self.rowCount()
            self.beginInsertRows(QModelIndex(), first_row_to_add, first_row_to_add + len(new_rows_data) - 1)
            for item in new_rows_data:
                self._rows.append(dict(index=item['index'], info=item['info'], checked=False))
            self.endInsertRows()
            # C·∫≠p nh·∫≠t l·∫°i map sau khi th√™m
            self._rebuild_index_map()

        # 3. T√≠nh to√°n v√† ph√°t t√≠n hi·ªáu th·ªëng k√™
        total_count = self.rowCount()
        running_count = sum(1 for row in self._rows if row.get('info', {}).get('is_process_started'))
        self.stats_updated.emit(total_count, running_count)

    def _rebuild_index_map(self):
        """X√¢y d·ª±ng l·∫°i map t·ª´ vm_index sang row index."""
        self._index_map = {row['index']: i for i, row in enumerate(self._rows)}

    def _are_dicts_equal(self, d1: Dict, d2: Dict) -> bool:
        """So s√°nh hai dictionary, b·ªè qua m·ªôt s·ªë key kh√¥ng quan tr·ªçng."""
        # C√°c key c√≥ th·ªÉ thay ƒë·ªïi th∆∞·ªùng xuy√™n nh∆∞ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªÉn th·ªã
        ignored_keys = {'pid', 'headless_pid', 'main_wnd', 'render_wnd'}
        keys1 = set(d1.keys()) - ignored_keys
        keys2 = set(d2.keys()) - ignored_keys
        if keys1 != keys2:
            return False
        for key in keys1:
            if d1[key] != d2[key]:
                return False
        return True

    def update_row_by_index(self, idx: int, info: Dict[str, Any]):
        """C·∫≠p nh·∫≠t th√¥ng tin cho m·ªôt h√†ng d·ª±a tr√™n vm_index."""
        if idx in self._index_map:
            row_idx = self._index_map[idx]
            self._rows[row_idx]["info"] = info
            tl = self.index(row_idx, 0)
            br = self.index(row_idx, self.columnCount()-1)
            self.dataChanged.emit(tl, br, [])

    def set_all_checked(self, checked: bool):
        """T·ªëi ∆∞u h√≥a: Ch·ªâ ph√°t t√≠n hi·ªáu dataChanged cho c·ªôt checkbox."""
        if not self._rows: return
        # Kh√¥ng c·∫ßn layoutAboutToBeChanged/layoutChanged v√¨ layout kh√¥ng ƒë·ªïi
        for row in self._rows:
            row["checked"] = checked
        
        if self.rowCount() > 0:
            # Ch·ªâ c·∫ßn ph√°t t√≠n hi·ªáu cho c·ªôt checkbox (column 0)
            tl = self.index(0, 0)
            br = self.index(self.rowCount()-1, 0)
            self.dataChanged.emit(tl, br, [Qt.ItemDataRole.CheckStateRole])

    def get_checked_indices(self) -> List[int]:
        return [row["index"] for row in self._rows if row.get("checked")]

    def find_source_row_by_index(self, idx: int) -> int:
        return self._index_map.get(idx, -1)

    def set_ui_states(self, ui_states: Dict[int, Any]):
        """Set transient ui status ('starting', 'stopping', ...) and refresh status column."""
        self._ui_states = dict(ui_states or {})
        if self.rowCount() > 0:
            tl = self.index(0, 3)  # STATUS column
            br = self.index(self.rowCount()-1, 3)  # STATUS column
            self.dataChanged.emit(tl, br, [Qt.ItemDataRole.UserRole])

class InstancesProxy(QSortFilterProxyModel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._keyword = ""
        self._status = "T·∫•t c·∫£"
        self.setDynamicSortFilter(True)
        self.setFilterCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)

    def set_filters(self, keyword: str, status: str):
        self._keyword = (keyword or "").strip().lower()
        self._status = status or "T·∫•t c·∫£"
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row: int, source_parent: QModelIndex) -> bool:
        m: InstancesModel = self.sourceModel()  # type: ignore
        if m is None: return True
        # status
        row = m._rows[source_row]
        info = row.get("info", {})
        running = info.get("is_process_started", False)
        if self._status == "ƒêang ch·∫°y" and not running: return False
        if self._status == "ƒê√£ t·∫Øt" and running: return False
        # keyword
        if not self._keyword:
            return True
        name = (info.get("name") or "").lower()
        return self._keyword in name or self._keyword == str(row.get("index", "")).lower()

    def data(self, index: QModelIndex, role=Qt.ItemDataRole.DisplayRole):
        # Override STT to show VM index and provide proper sorting
        if index.column() == TableColumn.STT:
            # Validate that index belongs to this proxy model
            if index.model() != self:
                return super().data(index, role)
                
            source_index = self.mapToSource(index)
            if source_index.isValid():
                row_data = self.sourceModel()._rows[source_index.row()]
                vm_index = row_data.get("index")
                
                if role == Qt.ItemDataRole.DisplayRole:
                    return str(vm_index) if vm_index is not None else "N/A"
                elif role == Qt.ItemDataRole.UserRole:
                    # Return integer for proper numeric sorting
                    return vm_index if vm_index is not None else -1
                    
        return super().data(index, role)
    
    def lessThan(self, left: QModelIndex, right: QModelIndex) -> bool:
        """Custom sorting logic for proper numeric sorting of Index column."""
        # For STT column, sort by numeric value instead of string
        if left.column() == TableColumn.STT:
            left_data = self.sourceModel().data(left, Qt.ItemDataRole.UserRole)
            right_data = self.sourceModel().data(right, Qt.ItemDataRole.UserRole)
            
            # Handle None/invalid values
            if left_data is None:
                left_data = -1
            if right_data is None:
                right_data = -1
                
            return left_data < right_data
            
        # For other columns, use default sorting
        return super().lessThan(left, right)
