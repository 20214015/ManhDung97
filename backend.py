# backend.py - X·ª≠ l√Ω t∆∞∆°ng t√°c v·ªõi c√¥ng c·ª• d√≤ng l·ªánh MuMuManager.exe

import os
import json
import shlex
from typing import List, Tuple, Any, Dict, Optional, Callable
from dataclasses import dataclass
from enum import Enum
from PyQt6.QtCore import QTimer, QThread, pyqtSignal, QObject

# Import CommandBus for QProcess-based execution
from cli.command_bus import get_command_bus, CommandPriority, CommandResult

# Constants ƒë·ªÉ tr√°nh magic numbers
DEFAULT_TIMEOUT = 10  # Increased from 5 to 10 seconds to give more time
MAX_INSTANCES_CREATE = 50
MAX_INSTANCES_CLONE = 20
MAX_NAME_LENGTH = 100

def find_mumu_instance_path(instance_index: int) -> str:
    """Try to find the actual path of a MuMu instance by checking common locations."""
    # Common MuMu installation paths (updated with user's actual path)
    possible_base_paths = [
        r"C:\Program Files\Netease\MuMuPlayerGlobal-12.0\vms",  # User's actual path
        r"C:\Program Files\Netease\MuMuPlayer-12.0\vms",
        r"C:\Program Files (x86)\Netease\MuMuPlayerGlobal-12.0\vms",
        r"C:\Program Files (x86)\Netease\MuMuPlayer-12.0\vms", 
        r"C:\Users\Public\Documents\MuMu\vms",
        r"C:\ProgramData\MuMu\vms",
        r"D:\Program Files\Netease\MuMuPlayerGlobal-12.0\vms",
        r"D:\Program Files\Netease\MuMuPlayer-12.0\vms",
        r"D:\MuMu\vms"
    ]
    
    # Try different naming patterns
    possible_names = [
        f"MuMuPlayerGlobal-12.0-{instance_index}",
        f"MuMuPlayer-12.0-{instance_index}",
        f"MuMu{instance_index}",
        f"vm_{instance_index}",
        f"instance_{instance_index}",
        str(instance_index)
    ]
    
    for base_path in possible_base_paths:
        if os.path.exists(base_path):
            for name in possible_names:
                full_path = os.path.join(base_path, name)
                if os.path.exists(full_path):
                    return full_path
    
    return ""

def calculate_folder_size(folder_path: str) -> int:
    """Calculate the total size of a folder in bytes."""
    if not folder_path or not os.path.exists(folder_path):
        return 0
    
    total_size = 0
    try:
        for dirpath, dirnames, filenames in os.walk(folder_path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                try:
                    if os.path.exists(file_path):
                        total_size += os.path.getsize(file_path)
                except (OSError, IOError):
                    # Skip files that can't be accessed
                    continue
    except (OSError, IOError):
        # Return 0 if folder can't be accessed
        return 0
    return total_size

def format_size(size_bytes: int) -> str:
    """Format size in bytes to human readable string."""
    if size_bytes == 0:
        return "0MB"
    
    size = float(size_bytes)
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size < 1024.0:
            if unit == 'B':
                return f"{int(size)}{unit}"
            else:
                return f"{size:.1f}{unit}"
        size /= 1024.0
    return f"{size:.1f}PB"

class MumuManager:
    """L·ªõp bao (wrapper) m·∫°nh m·∫Ω ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√¥ng c·ª• d√≤ng l·ªánh MuMuManager.exe."""

    def __init__(self, executable_path: str):
        # Auto-detect MuMu Manager path if not provided
        if not executable_path or executable_path.isspace():
            possible_paths = [
                r"C:\Program Files\Netease\MuMuPlayer\nx_main\MuMuManager.exe",  # From error message
                r"C:\Program Files\Netease\MuMuPlayerGlobal-12.0\shell\MuMuManager.exe",
                r"C:\Program Files\Netease\MuMuPlayer-12.0\shell\MuMuManager.exe",
                r"C:\Program Files (x86)\Netease\MuMuPlayerGlobal-12.0\shell\MuMuManager.exe",
                r"C:\Program Files (x86)\Netease\MuMuPlayer-12.0\shell\MuMuManager.exe",
                r"C:\Program Files\Netease\MuMuPlayerGlobal-12.0\nx_main\MuMuManager.exe",
                r"C:\Program Files\Netease\MuMuPlayer-12.0\nx_main\MuMuManager.exe"
            ]
            
            self.executable_path = ""
            for path in possible_paths:
                if os.path.isfile(path):
                    self.executable_path = path
                    print(f"‚úÖ Auto-detected MuMuManager.exe at: {path}")
                    break
            
            if not self.executable_path:
                print("‚ö†Ô∏è Could not auto-detect MuMuManager.exe path")
        else:
            self.executable_path = executable_path
        
        if not os.path.exists(self.executable_path):
            # Only show warning for Windows platform where MuMu is expected
            import sys
            if sys.platform == "win32":
                print(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y MuMuManager.exe t·∫°i {self.executable_path}")
            # On Linux/other platforms, this is expected behavior
            elif self.executable_path and not self.executable_path.isspace():
                print(f"Info: MuMuManager path not available on {sys.platform} platform")

        # Initialize CommandBus for QProcess-based execution
        self.command_bus = get_command_bus()
        self._pending_commands = {}  # Track pending async commands
        
        # Cache system for instance data
        self._instance_cache: Dict[int, Dict[str, Any]] = {}
        self._last_refresh_time = 0
        self._refresh_interval = 3000  # 3 seconds default
        self._auto_refresh_timer = QTimer()
        self._auto_refresh_timer.timeout.connect(self._auto_refresh_instances)
        self._cache_callbacks: List[Callable[[], None]] = []

    def is_valid(self) -> bool:
        """Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n th·ª±c thi ƒë√£ c·∫•u h√¨nh c√≥ h·ª£p l·ªá kh√¥ng."""
        return os.path.isfile(self.executable_path)
    
    def get_version_info(self) -> Tuple[bool, str]:
        """L·∫•y th√¥ng tin version c·ªßa MuMuManager."""
        return self._run_command_sync(['--version'], CommandPriority.LOW)
    
    def _validate_indices(self, indices: List[int]) -> Tuple[bool, str]:
        """Validate danh s√°ch indices."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn"
        if any(idx < 0 for idx in indices):
            return False, "Index kh√¥ng th·ªÉ √¢m"
        if len(indices) > 100:  # Gi·ªõi h·∫°n an to√†n
            return False, "Qu√° nhi·ªÅu instances ƒë∆∞·ª£c ch·ªçn (t·ªëi ƒëa 100)"
        return True, ""

    def _run_command_sync(self, args: List[str], priority: CommandPriority = CommandPriority.NORMAL, timeout: int = DEFAULT_TIMEOUT) -> Tuple[bool, str]:
        """Th·ª±c thi m·ªôt l·ªánh ƒë·ªìng b·ªô v√† nh·∫≠n output. S·ª≠ d·ª•ng CommandBus v·ªõi QProcess."""
        print(f"üîç DEBUG: _run_command_sync called with args: {args}")
        if not self.is_valid():
            print(f"üîç DEBUG: is_valid() returned False")
            return False, f"L·ªói: Kh√¥ng t√¨m th·∫•y '{os.path.basename(self.executable_path)}'."

        # Import QApplication for event loop
        from PyQt6.QtWidgets import QApplication
        from PyQt6.QtCore import QEventLoop

        app = QApplication.instance()
        if not app:
            return False, "QApplication not available for synchronous command execution"

        loop = QEventLoop()
        result = None

        def on_command_finished(cmd_result: CommandResult):
            nonlocal result
            result = cmd_result
            loop.quit()

        # Execute command asynchronously
        command_id = self.command_bus.execute_command(
            self.executable_path,
            args,
            priority,
            timeout=timeout,
            callback=on_command_finished
        )

        # Wait for completion using event loop
        loop.exec()

        if result is None:
            return False, f"L·ªói: L·ªánh b·ªã qu√° th·ªùi gian ch·ªù ({timeout}s). Args={' '.join(args)}"

        print(f"üîç DEBUG: CommandBus completed, returncode={result.return_code}")

        # Ki·ªÉm tra return code v√† x√¢y d·ª±ng error message c√≥ c·∫•u tr√∫c
        if result.return_code != 0:
            error_parts = [f"L·ªánh th·∫•t b·∫°i (return code: {result.return_code})"]
            if result.return_code == 4294967275:  # -21 in two's complement
                error_parts.append("MuMu executable returned error -21 (possibly needs different parameters or environment)")
            if result.error:
                error_parts.append(f"Error: {result.error.strip()}")
            if result.output:
                error_parts.append(f"Output: {result.output.strip()}")
            return False, "\n".join(error_parts)

        # H·ª£p nh·∫•t output v√† error m·ªôt c√°ch th√¥ng minh
        output_parts = []
        if result.output:
            output_parts.append(result.output.strip())
        if result.error:
            output_parts.append(result.error.strip())

        return True, "\n".join(output_parts) if output_parts else ""

    def _run_command(self, args: List[str]) -> Tuple[bool, str]:
        """Th·ª±c thi m·ªôt l·ªánh v√† nh·∫≠n output. Backward compatibility method."""
        return self._run_command_sync(args)

    def get_all_info_cached(self, use_cache: bool = True, max_age_seconds: int = 30) -> Tuple[bool, Any]:
        """L·∫•y th√¥ng tin t·∫•t c·∫£ instances v·ªõi cache support."""
        if use_cache and self.is_cache_valid(max_age_seconds):
            # Tr·∫£ v·ªÅ data t·ª´ cache
            cached_data = {}
            for vm_index, instance_data in self._instance_cache.items():
                # Convert back to string keys nh∆∞ format g·ªëc
                cached_data[str(vm_index)] = instance_data.copy()
            return True, cached_data
        else:
            # Refresh cache v√† tr·∫£ v·ªÅ data m·ªõi
            success, message = self.refresh_cache()
            if success:
                # Tr·∫£ v·ªÅ data t·ª´ cache sau khi refresh
                cached_data = {}
                for vm_index, instance_data in self._instance_cache.items():
                    cached_data[str(vm_index)] = instance_data.copy()
                return True, cached_data
            else:
                # Fallback to direct call n·∫øu cache refresh th·∫•t b·∫°i
                return self.get_all_info_direct()

    def get_all_info_direct(self) -> Tuple[bool, Any]:
        """L·∫•y th√¥ng tin cho t·∫•t c·∫£ m√°y ·∫£o, x·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng JSON m·ªôt c√°ch th√¥ng minh."""
        print(f"üîç DEBUG: get_all_info called, executable_path='{self.executable_path}'")
        print(f"üîç DEBUG: is_valid() = {self.is_valid()}")

        # MuMu Manager requires --vmindex parameter, skip simple command and use verbose directly
        print("üîç DEBUG: Using verbose command with --vmindex all...")
        success, output = self._run_command_sync(['info', '-v', 'all'], CommandPriority.LOW)
        print(f"üîç DEBUG: Verbose command returned: success={success}")

        if not success:
            print(f"üîç DEBUG: Verbose command failed: {output}")
            return False, output

        # Early return cho output r·ªóng
        if not output.strip():
            return True, {}

        try:
            return self._parse_json_output(output)
        except json.JSONDecodeError:
            error_details = f"L·ªói ph√¢n t√≠ch JSON. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c kh√¥ng h·ª£p l·ªá.\n--- D·ªØ li·ªáu th√¥ ---\n{output}\n--- K·∫øt th√∫c ---"
            return False, error_details

    def get_all_info(self) -> Tuple[bool, Any]:
        """Alias cho get_all_info_direct ƒë·ªÉ backward compatibility."""
        return self.get_all_info_direct()
        """L·∫•y th√¥ng tin m·ªôt instance v·ªõi cache support."""
        if use_cache and self.is_cache_valid(max_age_seconds):
            cached_instance = self.get_cached_instance(vm_index)
            if cached_instance:
                return True, cached_instance.copy()

        # Fallback to direct call
        return self.get_single_info(vm_index)
        """L·∫•y th√¥ng tin cho t·∫•t c·∫£ m√°y ·∫£o, x·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng JSON m·ªôt c√°ch th√¥ng minh."""
        print(f"üîç DEBUG: get_all_info called, executable_path='{self.executable_path}'")
        print(f"üîç DEBUG: is_valid() = {self.is_valid()}")

        # MuMu Manager requires --vmindex parameter, skip simple command and use verbose directly
        print("üîç DEBUG: Using verbose command with --vmindex all...")
        success, output = self._run_command_sync(['info', '-v', 'all'], CommandPriority.LOW)
        print(f"üîç DEBUG: Verbose command returned: success={success}")

        if not success:
            print(f"üîç DEBUG: Verbose command failed: {output}")
            return False, output

        # Early return cho output r·ªóng
        if not output.strip():
            return True, {}

        try:
            return self._parse_json_output(output)
        except json.JSONDecodeError:
            error_details = f"L·ªói ph√¢n t√≠ch JSON. D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c kh√¥ng h·ª£p l·ªá.\n--- D·ªØ li·ªáu th√¥ ---\n{output}\n--- K·∫øt th√∫c ---"
            return False, error_details
    
    def _parse_json_output(self, output: str) -> Tuple[bool, Dict[str, Any]]:
        """Helper method ƒë·ªÉ parse JSON output v·ªõi nhi·ªÅu format kh√°c nhau."""
        # Th·ª≠ parse multi-line JSON objects tr∆∞·ªõc
        json_lines = [line.strip() for line in output.strip().split('\n') 
                     if line.strip() and line.startswith('{')]
        
        if len(json_lines) > 1:
            # Multiple JSON objects, m·ªôt object per line
            json_objects = [json.loads(line) for line in json_lines]
            if all('index' in obj for obj in json_objects):
                parsed_data = {str(obj['index']): obj for obj in json_objects}
                # Add real disk usage calculation
                self._calculate_disk_usage_for_all(parsed_data)
                return True, parsed_data

        # Th·ª≠ parse nh∆∞ single JSON object
        data = json.loads(output)
        
        # X·ª≠ l√Ω c√°c format kh√°c nhau
        if isinstance(data, list):
            # Array of objects
            if all(isinstance(obj, dict) and 'index' in obj for obj in data):
                parsed_data = {str(obj['index']): obj for obj in data}
                self._calculate_disk_usage_for_all(parsed_data)
                return True, parsed_data
            # Array without index, s·ª≠ d·ª•ng position
            parsed_data = {str(i): obj for i, obj in enumerate(data)}
            self._calculate_disk_usage_for_all(parsed_data)
            return True, parsed_data
        
        if isinstance(data, dict):
            # Dictionary with indexed objects
            if all(isinstance(v, dict) and 'index' in v for v in data.values()):
                self._calculate_disk_usage_for_all(data)
                return True, data
            # Single object with index
            if 'index' in data:
                parsed_data = {str(data['index']): data}
                self._calculate_disk_usage_for_all(parsed_data)
                return True, parsed_data
            # Dictionary format kh√°c
            self._calculate_disk_usage_for_all(data)
            return True, data
                
        return False, f"ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£:\n{output}"

    def _calculate_disk_usage_for_all(self, instances_data: Dict[str, Any]) -> None:
        """Calculate real disk usage for all instances."""
        for instance_key, instance_data in instances_data.items():
            if isinstance(instance_data, dict):
                self._calculate_disk_usage_for_instance(instance_data)
    
    def _calculate_disk_usage_for_instance(self, instance_data: Dict[str, Any]) -> None:
        """Calculate real disk usage for a single instance."""
        try:
            instance_id = instance_data.get('index', 'unknown')
            
            # First, check if MuMuManager already provided disk_size_bytes
            disk_bytes = instance_data.get('disk_size_bytes', 0)
            if disk_bytes and disk_bytes > 0:
                # Use the data from MuMuManager directly
                formatted_size = format_size(disk_bytes)
                instance_data['disk_usage'] = formatted_size
                instance_data['disk_size_bytes'] = disk_bytes
                
                # Log for debugging (first few instances only)
                if int(str(instance_id)) <= 3:
                    print(f"üíæ Instance {instance_id}: Using MuMu data -> {formatted_size} ({disk_bytes} bytes)")
                return
            
            # If no disk_size_bytes from MuMu, try to calculate manually
            path = instance_data.get('path', '')
            
            # If no path provided, try to find it automatically
            if not path or path == '':
                path = find_mumu_instance_path(int(str(instance_id)))
                if path:
                    # Update the instance data with found path
                    instance_data['path'] = path
            
            # Debug: Log path info for first few instances
            if int(str(instance_id)) <= 3:
                print(f"üîç Instance {instance_id}: path='{path}', exists={os.path.exists(path) if path else False}")
            
            if path and os.path.exists(path):
                # Calculate the actual disk usage manually
                disk_bytes = calculate_folder_size(path)
                formatted_size = format_size(disk_bytes)
                
                # Update the instance data with calculated disk usage
                instance_data['disk_usage'] = formatted_size
                instance_data['disk_size_bytes'] = disk_bytes
                
                # Log for debugging (first few instances only)
                if int(str(instance_id)) <= 3:
                    print(f"üíæ Instance {instance_id}: Calculated {path} -> {formatted_size} ({disk_bytes} bytes)")
            else:
                # No valid path and no MuMu data, keep as 0MB
                if int(str(instance_id)) <= 3:
                    print(f"‚ùå Instance {instance_id}: No data available - keeping 0MB")
                instance_data['disk_usage'] = "0MB"
                instance_data['disk_size_bytes'] = 0
        except Exception as e:
            # If anything fails, keep original values
            instance_data['disk_usage'] = instance_data.get('disk_usage', '0MB')
            instance_data['disk_size_bytes'] = 0
            print(f"‚ö†Ô∏è Error calculating disk usage for instance {instance_data.get('index', 'unknown')}: {e}")

    def get_single_info(self, index: int) -> Tuple[bool, Any]:
        """L·∫•y th√¥ng tin cho m·ªôt m√°y ·∫£o duy nh·∫•t v·ªõi error handling t·ªët h∆°n."""
        success, output = self._run_command_sync(['info', '-v', str(index)], CommandPriority.LOW)
        if not success:
            return False, f"Command failed: {output}"
        
        if not output.strip():
            return False, f"Kh√¥ng c√≥ d·ªØ li·ªáu cho m√°y ·∫£o index {index}"
            
        try:
            data = json.loads(output)
            
            # Validate that data is not empty and contains expected structure
            if data is None:
                return False, f"D·ªØ li·ªáu l√† None cho m√°y ·∫£o {index}"
                
            if not isinstance(data, dict):
                return False, f"D·ªØ li·ªáu kh√¥ng ph·∫£i dict cho m√°y ·∫£o {index}: {type(data)} = {data}"
            
            if len(data) == 0:
                return False, f"D·ªØ li·ªáu dict r·ªóng cho m√°y ·∫£o {index}"
            
            # Check for essential fields that should exist in VM info
            if 'index' not in data and 'name' not in data:
                return False, f"D·ªØ li·ªáu thi·∫øu th√¥ng tin c∆° b·∫£n cho m√°y ·∫£o {index}: {list(data.keys())}"
            
            # Ensure index field exists and matches
            if 'index' not in data:
                data['index'] = index
            
            # Calculate real disk usage for this instance
            self._calculate_disk_usage_for_instance(data)
                
            return True, data
        except json.JSONDecodeError as e:
            return False, f"L·ªói ph√¢n t√≠ch JSON cho m√°y ·∫£o {index}: {e}\nD·ªØ li·ªáu: {output}"

    def control_instance(self, indices: List[int], action: str) -> Tuple[bool, str]:
        """ƒêi·ªÅu khi·ªÉn instances v·ªõi validation v√† priority-based execution."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn"
        if not action:
            return False, "Action kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"

        # Determine priority based on action
        if action in ['launch', 'start']:
            priority = CommandPriority.HIGH  # Start operations have high priority
        elif action in ['shutdown', 'stop', 'kill']:
            priority = CommandPriority.CRITICAL  # Stop operations have highest priority
        else:
            priority = CommandPriority.NORMAL

        return self._run_command_sync(['control', '--vmindex', ",".join(map(str, indices)), action], priority)

    def create_instance(self, count: int) -> Tuple[bool, str]:
        """T·∫°o instances m·ªõi v·ªõi validation."""
        if count <= 0:
            return False, "S·ªë l∆∞·ª£ng instance ph·∫£i l·ªõn h∆°n 0"
        if count > MAX_INSTANCES_CREATE:  # S·ª≠ d·ª•ng constant
            return False, f"Kh√¥ng th·ªÉ t·∫°o qu√° {MAX_INSTANCES_CREATE} instances c√πng l√∫c"
        return self._run_command_sync(['create', '-n', str(count)], CommandPriority.NORMAL)

    def clone_instance(self, source_index: int, count: int) -> Tuple[bool, str]:
        """Clone instance v·ªõi validation."""
        if count <= 0:
            return False, "S·ªë l∆∞·ª£ng clone ph·∫£i l·ªõn h∆°n 0"
        if count > MAX_INSTANCES_CLONE:  # S·ª≠ d·ª•ng constant
            return False, f"Kh√¥ng th·ªÉ clone qu√° {MAX_INSTANCES_CLONE} instances c√πng l√∫c"
        return self._run_command_sync(['clone', '-v', str(source_index), '-n', str(count)], CommandPriority.NORMAL)

    def delete_instance(self, indices: List[int]) -> Tuple[bool, str]:
        """X√≥a instances v·ªõi validation."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x√≥a"
        return self._run_command_sync(['delete', '-v', ",".join(map(str, indices))], CommandPriority.HIGH)

    def rename_instance(self, index: int, new_name: str) -> Tuple[bool, str]:
        """ƒê·ªïi t√™n instance v·ªõi validation."""
        if not new_name or not new_name.strip():
            return False, "T√™n m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        if len(new_name.strip()) > MAX_NAME_LENGTH:  # S·ª≠ d·ª•ng constant
            return False, f"T√™n instance qu√° d√†i (t·ªëi ƒëa {MAX_NAME_LENGTH} k√Ω t·ª±)"
        return self._run_command_sync(['rename', '-v', str(index), '-n', new_name.strip()], CommandPriority.NORMAL)

    def run_adb_command(self, indices: List[int], command_str: str) -> Tuple[bool, str]:
        """Ch·∫°y ADB command v·ªõi validation v√† security checks."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn"
        if not command_str or not command_str.strip():
            return False, "L·ªánh ADB kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        
        # Basic security validation
        dangerous_commands = ['rm -rf', 'format', 'factory', 'wipe', 'delete', 'dd if=']
        command_lower = command_str.lower()
        if any(dangerous in command_lower for dangerous in dangerous_commands):
            return False, f"L·ªánh c√≥ th·ªÉ nguy hi·ªÉm v√† kh√¥ng ƒë∆∞·ª£c ph√©p: {command_str}"
        
        try:
            cmd_parts = shlex.split(command_str.strip())
            if not cmd_parts:
                return False, "L·ªánh ADB kh√¥ng h·ª£p l·ªá sau khi parse"
            return self._run_command_sync(['adb', '-v', ",".join(map(str, indices)), '-c'] + cmd_parts, CommandPriority.HIGH)
        except ValueError as e:
            return False, f"L·ªói parse command: {e}"

    def set_simulation_value(self, indices: List[int], key: str, value: str) -> Tuple[bool, str]:
        """Set simulation value v·ªõi validation."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn"
        if not key or not key.strip():
            return False, "Key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        return self._run_command_sync(['simulation', '-v', ",".join(map(str, indices)), '-sk', key.strip(), '-sv', value], CommandPriority.NORMAL)

    def get_settings_info(self, index: int) -> Tuple[bool, str]:
        """L·∫•y th√¥ng tin settings v·ªõi error handling."""
        return self._run_command_sync(['setting', '-v', str(index), '-i'], CommandPriority.LOW)

    def get_writable_settings_values(self, index: int) -> Tuple[bool, str]:
        """L·∫•y gi√° tr·ªã settings c√≥ th·ªÉ write v·ªõi error handling."""
        return self._run_command_sync(['setting', '-v', str(index), '-aw'], CommandPriority.LOW)

    def set_settings(self, indices: List[int], settings: Dict[str, str]) -> Tuple[bool, str]:
        """Set multiple settings v·ªõi validation v√† optimization."""
        if not indices:
            return False, "Kh√¥ng c√≥ instance n√†o ƒë∆∞·ª£c ch·ªçn"
        if not settings:
            return True, "Kh√¥ng c√≥ c√†i ƒë·∫∑t n√†o ƒë∆∞·ª£c thay ƒë·ªïi."
        
        # Validate settings
        invalid_settings = []
        for key, value in settings.items():
            if not key or not key.strip():
                invalid_settings.append(f"Key r·ªóng v·ªõi value: {value}")
        
        if invalid_settings:
            return False, f"Settings kh√¥ng h·ª£p l·ªá: {'; '.join(invalid_settings)}"
        
        # Build command efficiently
        args = ['setting', '-v', ",".join(map(str, indices))]
        for key, value in settings.items():
            args.extend(['-k', key.strip(), '-val', str(value)])
            
        return self._run_command_sync(args, CommandPriority.NORMAL)

    # ===== CACHE SYSTEM METHODS =====

    def start_auto_refresh(self, interval_ms: int = 3000) -> None:
        """B·∫Øt ƒë·∫ßu auto refresh v·ªõi interval ch·ªâ ƒë·ªãnh (ms)."""
        self._refresh_interval = interval_ms
        if not self._auto_refresh_timer.isActive():
            self._auto_refresh_timer.start(self._refresh_interval)
            print(f"üîÑ Auto refresh started with {interval_ms}ms interval")

    def stop_auto_refresh(self) -> None:
        """D·ª´ng auto refresh."""
        if self._auto_refresh_timer.isActive():
            self._auto_refresh_timer.stop()
            print("‚èπÔ∏è Auto refresh stopped")

    def set_refresh_interval(self, interval_ms: int) -> None:
        """Thay ƒë·ªïi interval c·ªßa auto refresh."""
        self._refresh_interval = interval_ms
        if self._auto_refresh_timer.isActive():
            self._auto_refresh_timer.setInterval(interval_ms)
            print(f"üîÑ Refresh interval updated to {interval_ms}ms")

    def add_cache_callback(self, callback: Callable[[], None]) -> None:
        """Th√™m callback ƒë∆∞·ª£c g·ªçi khi cache ƒë∆∞·ª£c c·∫≠p nh·∫≠t."""
        if callback not in self._cache_callbacks:
            self._cache_callbacks.append(callback)

    def remove_cache_callback(self, callback: Callable[[], None]) -> None:
        """X√≥a callback."""
        if callback in self._cache_callbacks:
            self._cache_callbacks.remove(callback)

    def _notify_cache_callbacks(self) -> None:
        """Th√¥ng b√°o cho t·∫•t c·∫£ callbacks r·∫±ng cache ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t."""
        for callback in self._cache_callbacks:
            try:
                callback()
            except Exception as e:
                print(f"‚ö†Ô∏è Cache callback error: {e}")

    def _auto_refresh_instances(self) -> None:
        """Auto refresh instances data."""
        try:
            self.refresh_cache()
        except Exception as e:
            print(f"‚ö†Ô∏è Auto refresh error: {e}")

    def refresh_cache(self, force: bool = False) -> Tuple[bool, str]:
        """Refresh cache v·ªõi so s√°nh th√¥ng minh ƒë·ªÉ ch·ªâ emit changes c·∫ßn thi·∫øt."""
        try:
            # L·∫•y d·ªØ li·ªáu m·ªõi
            success, new_data = self.get_all_info()
            if not success:
                return False, f"Failed to get instance data: {new_data}"

            # Chu·∫©n h√≥a new_data th√†nh dict theo vmIndex
            if isinstance(new_data, dict):
                new_instances = new_data
            else:
                return False, "Invalid data format from get_all_info"

            # L·∫•y danh s√°ch vmIndex c≈© v√† m·ªõi
            old_indices = set(self._instance_cache.keys())
            new_indices = set()

            # X·ª≠ l√Ω t·ª´ng instance m·ªõi
            changes = {
                'added': [],
                'removed': [],
                'modified': []
            }

            for vm_index_str, instance_data in new_instances.items():
                try:
                    vm_index = int(vm_index_str)
                    new_indices.add(vm_index)

                    # Chu·∫©n h√≥a instance data
                    normalized_data = self._normalize_instance_data(instance_data)

                    # So s√°nh v·ªõi cache c≈©
                    if vm_index not in self._instance_cache:
                        # Instance m·ªõi
                        changes['added'].append(vm_index)
                        self._instance_cache[vm_index] = normalized_data
                    else:
                        # So s√°nh ƒë·ªÉ t√¨m thay ƒë·ªïi
                        old_data = self._instance_cache[vm_index]
                        if self._has_instance_changed(old_data, normalized_data):
                            changes['modified'].append(vm_index)
                            self._instance_cache[vm_index] = normalized_data

                except (ValueError, KeyError) as e:
                    print(f"‚ö†Ô∏è Error processing instance {vm_index_str}: {e}")
                    continue

            # T√¨m instances b·ªã x√≥a
            removed_indices = old_indices - new_indices
            for vm_index in removed_indices:
                changes['removed'].append(vm_index)
                del self._instance_cache[vm_index]

            # C·∫≠p nh·∫≠t timestamp
            from time import time
            self._last_refresh_time = time()

            # Th√¥ng b√°o changes n·∫øu c√≥
            if any(changes.values()):
                self._emit_cache_changes(changes)

            # Th√¥ng b√°o callbacks
            self._notify_cache_callbacks()

            return True, f"Cache refreshed: +{len(changes['added'])} -{len(changes['removed'])} ~{len(changes['modified'])}"

        except Exception as e:
            return False, f"Cache refresh error: {e}"

    def _normalize_instance_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Chu·∫©n h√≥a instance data ƒë·ªÉ so s√°nh."""
        normalized = {}

        # C√°c tr∆∞·ªùng quan tr·ªçng ƒë·ªÉ so s√°nh
        important_fields = [
            'index', 'name', 'status', 'cpu', 'memory', 'disk_usage',
            'disk_size_bytes', 'path', 'version', 'running'
        ]

        for field in important_fields:
            if field in data:
                normalized[field] = data[field]
            else:
                normalized[field] = None

        # Th√™m timestamp ƒë·ªÉ track changes
        from time import time
        normalized['_last_updated'] = time()

        return normalized

    def _has_instance_changed(self, old_data: Dict[str, Any], new_data: Dict[str, Any]) -> bool:
        """Ki·ªÉm tra xem instance c√≥ thay ƒë·ªïi kh√¥ng."""
        # C√°c tr∆∞·ªùng c·∫ßn so s√°nh
        compare_fields = [
            'name', 'status', 'cpu', 'memory', 'disk_usage', 'running'
        ]

        for field in compare_fields:
            old_value = old_data.get(field)
            new_value = new_data.get(field)

            # X·ª≠ l√Ω None values
            if old_value is None and new_value is None:
                continue
            if old_value is None or new_value is None:
                return True

            # So s√°nh values
            if str(old_value).strip() != str(new_value).strip():
                return True

        return False

    def _emit_cache_changes(self, changes: Dict[str, List[int]]) -> None:
        """Emit cache changes cho UI update."""
        print(f"üîÑ Cache changes: +{len(changes['added'])} -{len(changes['removed'])} ~{len(changes['modified'])}")

        # Emit cho t·ª´ng lo·∫°i change
        for change_type, indices in changes.items():
            if indices:
                print(f"  {change_type.upper()}: {indices}")

    def get_cached_instances(self) -> Dict[int, Dict[str, Any]]:
        """L·∫•y to√†n b·ªô cache hi·ªán t·∫°i."""
        return self._instance_cache.copy()

    def get_cached_instance(self, vm_index: int) -> Optional[Dict[str, Any]]:
        """L·∫•y instance t·ª´ cache theo vmIndex."""
        return self._instance_cache.get(vm_index)

    def is_cache_valid(self, max_age_seconds: int = 30) -> bool:
        """Ki·ªÉm tra cache c√≥ c√≤n h·ª£p l·ªá kh√¥ng."""
        from time import time
        return (time() - self._last_refresh_time) < max_age_seconds

    def clear_cache(self) -> None:
        """X√≥a to√†n b·ªô cache."""
        self._instance_cache.clear()
        self._last_refresh_time = 0
        print("üóëÔ∏è Cache cleared")
